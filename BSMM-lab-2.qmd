---
title: "BSMM-lab-2"
subtitle: "BSMM 8740 Fall 2023"
author: "Zerin Anjum Khan"
date: "2023-09-29"
format: html
editor: visual
self-contained: true
---

## Setup

Load packages and data:
```{r load-pkg-data}
#| message: false
library(dplyr)
library(readr)
library(magrittr)
library(tidyverse)
```

```{r}
#| message: false
the_tate <- readr::read_delim("data/the-tate-collection.csv", ";", escape_double = FALSE, trim_ws = TRUE)
the_tate_artists <- readr::read_csv("data/the-tate-artists.csv")
```



## Exercises

### Exercise 1

```{r}
# Print the result #
the_tate <- read_delim("data/the-tate-collection.csv", ";", escape_double = FALSE, trim_ws = TRUE)
the_tate_artists <- read_csv("data/the-tate-artists.csv")
print(the_tate)

# Calculating no. of unique artists represented in the collection
unique_artists_count <- the_tate |>
 select(artist) |>
  distinct() |>
  nrow()
unique_artists_count

# The Total no. of rows and columns in the the_tate dataset
tate_dimensions <- dim(the_tate)
tate_summary <- the_tate |>
  summarize(
    Totalthe_tate = n(),               # Total no. of the_tate
    UniqueArtists = unique_artists_count, # Number of unique artists
    MinYear = min(year, na.rm = TRUE),  # Minimum year in collection
    MaxYear = max(year, na.rm = TRUE), # Maximum year in collection
    MinacquisitionYear = min(acquisitionYear, na.rm = TRUE), # Min Acqusition year
    MaxacquisitionYear = max(acquisitionYear, na.rm = TRUE) # Max Acqusition year
)
# The summary
print(tate_summary)

```

The `the_tate` dataset has 3336\_ unique artists who worked from \_\_1545\_\_\_ to \_2012\_\_. The works were acquired between the years \_1823\_\_ and \_2013\_\_.

### Exercise 2

```{r}
# Load the  libraries #
library(tibble)
library(dplyr)

#Introducing the_tate and the_tate_artists dataset using DataExplorer#

DataExplorer::introduce(the_tate)
DataExplorer::introduce(the_tate_artists)
DataExplorer::plot_missing(the_tate)
DataExplorer::plot_missing(the_tate_artists)

works_with_missing_year <- sum(is.na(the_tate$year))
print(works_with_missing_year)

# Filtering the 'the_tate' dataset to select rows with missing 'year' values #
the_tate|>dplyr::filter(is.na(year))|>dplyr::distinct(artist)
artists_with_missing_date <- the_tate |>
  filter(is.na(year)) |>
  distinct(artist) |>
  nrow()
print(artists_with_missing_date)

#Filtering the tate_dataset to select rows with missing year values#
artist_missing_year_count <- the_tate|>dplyr::filter(is.na(year)) |> 
  group_by(artist) |>
  summarise(missing_year = sum(is.na(year))) |> 
  arrange(desc(missing_year)) |> #Arrange the results in descending order of missing 'year' counts#
  as_tibble()

print(artist_missing_year_count)

artists_with_missing_year <- nrow(artist_missing_year_count)

print(artists_with_missing_year)

artist_missing_year_count <- artist_missing_year_count |> # Calculating percentage of missing 'year' values for each artist #
  mutate(percentage = (missing_year / works_with_missing_year) * 100)

artist_missing_year_count <- artist_missing_year_count |>
  mutate(cumulative_percentage = cumsum(percentage)) # Calculating cumulative percentage of missing 'year' values # 

artists_to_resolve_50_percent <- min(which(artist_missing_year_count$cumulative_percentage >= 50))

print(artists_to_resolve_50_percent)
```

How number of works with missing dates is \_5397\_.

The number of artists whose works have missing dates is \_461\_.

It would require resolving missing year data for only \_11\_ artists resolve resolve at least 50% of the missing data.

The missing year data likely to be classified as \_MAR\_\_\_.

### Exercise 3

```{r}


# Calculating count of works for each artist in the 'the_tate' dataset #
artist_work_counts <- the_tate |>
  group_by(artist) |>
  summarize(title = n()) |>
  arrange(desc(title))

# Extract and display the top 10 artists with the most works #
top_10_artists <- artist_work_counts |>
  slice_head(n = 10)

print(artist_work_counts)
print(top_10_artists)
```

The artist with the most works in the Tate collection is \_Turner, Joseph Mallord William\_\_.

The artist with the tenth-most works in the Tate collection is \_Warhol, Andy\_\_.

### Exercise 4

```{r}
library(dplyr)
library(gt)
library(gtExtras)

# Assuming we have a dataframe or tibble named 'the_tate'

# Calculate total works #
total_works <- nrow(the_tate)
artist_work_counts %<>%mutate(percentage=(title/total_works)*100)
print(artist_work_counts)

# Create a gt table #
table <- artist_work_counts %>%
  gt() %>%
  fmt_number(
    columns = c(title, percentage), # Format both title and percentage columns
    decimals = 2 # No decimal places for title, and decimals for percentage
  ) %>%
  
#Display the formatted table using print #
print(table)
```

The artist with the greatest number of works in the Tate collection represent \_56.9\_\_% of the total number of works

### Exercise 5

```{r}

total_rows <- total_works

# Selecting the columns for artist and title to count distinct combinations #
distinct_artist_title_pair <- the_tate |> select(artist,title) |> distinct()

distinct_count <- nrow(distinct_artist_title_pair)

print(total_rows) # Print total number of rows in the dataset #

print(distinct_count)  # Print distinct pairs only #

# Count and print the number of duplicated artist-title pairs
duplicated_count <- total_rows - distinct_count
print(duplicated_count)
```

There are \_23705\_ duplicate artist-title pairs

### Exercise 6

```{r}

library(tidyr) # Load tidyverse library 

the_tate <- the_tate |>
  mutate(area_cmsquare= width * height)

selected_artworks <- the_tate |>
  select(artist, title, area_cmsquare) |>
  drop_na() # Remove rows with containing NA values#

ordered_artworks <- selected_artworks |>
  arrange(area_cmsquare)

# Remove largest artwork in the collection #
largest_artwork <- ordered_artworks |>
  slice_tail(n = 1)

# Remove smallest artwork in the collection #
smallest_artwork <- ordered_artworks |>
  slice_head(n = 1)
# Print both the smallest and largest artwork details #
print(largest_artwork)
print(smallest_artwork)
```

The artist with the largest work in the tate collection is \_Therrien, Robert.\_\_

The artist with the smallest work in the collection is \_Mesens, E.L.T\_\_. The smallest work has area \_237\_\_ $\text{cm}^2$

### Exercise 7

```{r}

library(dplyr)

# Left join to group the tables and slice the result by gender criteria #
gender_grouped<- the_tate |>
  dplyr::left_join(the_tate_artists, by = c("artist" = "name")) |>   tidyr::drop_na(gender) |> group_by(gender) # used tidyverse to drop columns having NA values and joined the two tables the_tate and the_tate_artists anf grouped by gender #


print(gender_grouped) # display the gender grouped table
```

...

### Exercise 8

```{r}
library(dplyr)
library(readr)

data <- read_csv("data/SPX_HistoricalData_1692322132002.csv") 
print(data)

data <- data |> # Add a column for the year of transaction #
  mutate(Year = lubridate::year(as.Date(Date, format = "%m/%d/%Y")))

data<- data |>
rename("close"=`Close/Last`)

data <- data |>
  mutate(rd = log(lead(close) / close))

data<- data |>
  mutate(vard = rd^2)


summary_data <- data |> #summarise the data to group by year #
  group_by(Year) |>
  summarize(
    Annual_Return = (exp(sum(rd, na.rm = TRUE)) - 1)*100, 
    Annual_StdDev = sqrt(sum(vard, na.rm = TRUE))*100,
    .groups = "drop"  # Drop grouping after summary
  )

# Print the summary data
print(summary_data)
```

The annual return in the SPX price in 2020 was \_-13.98\_\_%.

The corresponding price volatility was \_ 34.70\_\_%.

### Exercise 9

```{r}
# Install packages to read the csv file

# Load required libraries
library(dplyr)
library(readr)

# Calculate period return and period volatility
period_return <- prod(1 + summary_data$Annual_Return) - 1
period_volatility <- sqrt(sum(summary_data$Annual_StdDev^2))

# Create summary rows for period return and period volatility
summary_rows <- tibble::tibble(
  Year = as.character("Period"),  # Ensure "Year" is character type
  Annual_Return = period_return,
  Annual_StdDev = period_volatility
)

# Convert the "Year" column in summary_data to character
summary_data <- summary_data |>
  mutate(Year = as.character(Year))

# Combine the summary rows with the summary_data
summary_data <- bind_rows(summary_data, summary_rows)

# Print the summary data
print(summary_data)
```

The period volatility was \_48.77 \_%

### 
